name: Docker CI CD

on:
  push:
    branches: [prod]

env:
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout all code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-and-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: demo-node-action-ecr-ec2
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          # 509316050398.dkr.ecr.us-east-1.amazonaws.com/demo-node-action-ecr-ec2:8bd9cf82ea05513226c436afebb31fb7f72c4576
          # 509316050398.dkr.ecr.us-east-1.amazonaws.com/demo-node-action-ecr-ec2:562ad6fb5887b320882f953e403d5b9cdcebde00
          echo "IMAGE_URL=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "MY_TEST=hello" >> "$GITHUB_OUTPUT"
    outputs:
      IMAGE_URL: ${{ steps.build-and-push.outputs.IMAGE_URL }}
      MY_TEST: ${{ steps.build-and-push.outputs.MY_TEST }}

  deploy:
    needs: build
    runs-on: [self-hosted, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Echo image url
        env:
          IMAGE_URL: ${{needs.build.outputs.IMAGE_URL}}
          MY_TEST: ${{needs.build.outputs.MY_TEST}}
        run: echo "Docker image URL= $IMAGE_URL , $MY_TEST"

      - name: pull the images on ec2
        env:
          IMAGE_URL: ${{needs.build.outputs.IMAGE_URL}}
        run: |
          docker pull $IMAGE_URL
          docker stop demo-backend || true
          docker rm demo-backend || true
          docker run  -d -p 80:4000 --name demo-backend --restart always $IMAGE_URL

      - name: Purge Unused Docker Images
        run: |
          sleep 10
          sudo docker image prune --all -f
